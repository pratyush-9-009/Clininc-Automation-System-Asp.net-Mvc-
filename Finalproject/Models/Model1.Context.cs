//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Finalproject.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectEntities1 : DbContext
    {
        public ProjectEntities1()
            : base("name=ProjectEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<DoctorAppointment> DoctorAppointments { get; set; }
        public virtual DbSet<Drug> Drugs { get; set; }
        public virtual DbSet<DrugDelivery> DrugDeliveries { get; set; }
        public virtual DbSet<MemberLogin> MemberLogins { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<RoleDetail> RoleDetails { get; set; }
        public virtual DbSet<SpecializedData> SpecializedDatas { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Inbox> Inboxes { get; set; }
        public virtual DbSet<PateintOrderDetail> PateintOrderDetails { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
    
        public virtual int InsertMember(string emailId, string password, Nullable<int> roleId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMember", emailIdParameter, passwordParameter, roleIdParameter);
        }
    
        public virtual int UpdatePassword(Nullable<int> memberid, string passwordnew)
        {
            var memberidParameter = memberid.HasValue ?
                new ObjectParameter("memberid", memberid) :
                new ObjectParameter("memberid", typeof(int));
    
            var passwordnewParameter = passwordnew != null ?
                new ObjectParameter("passwordnew", passwordnew) :
                new ObjectParameter("passwordnew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", memberidParameter, passwordnewParameter);
        }
    
        public virtual int InsertPateint(Nullable<int> memid, string firstname, string lastname, Nullable<System.DateTime> dateOfBirth, string gender, string address)
        {
            var memidParameter = memid.HasValue ?
                new ObjectParameter("memid", memid) :
                new ObjectParameter("memid", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPateint", memidParameter, firstnameParameter, lastnameParameter, dateOfBirthParameter, genderParameter, addressParameter);
        }
    
        public virtual int InsertPateintOrder(Nullable<int> pateintid, Nullable<int> drugid, string orderNumber, Nullable<int> quantity, Nullable<System.DateTime> orderdate, string orderstatus)
        {
            var pateintidParameter = pateintid.HasValue ?
                new ObjectParameter("pateintid", pateintid) :
                new ObjectParameter("pateintid", typeof(int));
    
            var drugidParameter = drugid.HasValue ?
                new ObjectParameter("drugid", drugid) :
                new ObjectParameter("drugid", typeof(int));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("orderNumber", orderNumber) :
                new ObjectParameter("orderNumber", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var orderdateParameter = orderdate.HasValue ?
                new ObjectParameter("orderdate", orderdate) :
                new ObjectParameter("orderdate", typeof(System.DateTime));
    
            var orderstatusParameter = orderstatus != null ?
                new ObjectParameter("orderstatus", orderstatus) :
                new ObjectParameter("orderstatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPateintOrder", pateintidParameter, drugidParameter, orderNumberParameter, quantityParameter, orderdateParameter, orderstatusParameter);
        }
    
        public virtual int InsertDoctorApp(Nullable<int> pateintid, Nullable<int> doctorid, string subject, string description, Nullable<System.DateTime> appdate, string appstatus)
        {
            var pateintidParameter = pateintid.HasValue ?
                new ObjectParameter("pateintid", pateintid) :
                new ObjectParameter("pateintid", typeof(int));
    
            var doctoridParameter = doctorid.HasValue ?
                new ObjectParameter("doctorid", doctorid) :
                new ObjectParameter("doctorid", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var appdateParameter = appdate.HasValue ?
                new ObjectParameter("appdate", appdate) :
                new ObjectParameter("appdate", typeof(System.DateTime));
    
            var appstatusParameter = appstatus != null ?
                new ObjectParameter("appstatus", appstatus) :
                new ObjectParameter("appstatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDoctorApp", pateintidParameter, doctoridParameter, subjectParameter, descriptionParameter, appdateParameter, appstatusParameter);
        }
    
        public virtual int InsertMessagePat(string fromEmail, string toEmail, string subject, string msgDetail, Nullable<System.DateTime> msgDate, Nullable<int> replyid, string isread)
        {
            var fromEmailParameter = fromEmail != null ?
                new ObjectParameter("fromEmail", fromEmail) :
                new ObjectParameter("fromEmail", typeof(string));
    
            var toEmailParameter = toEmail != null ?
                new ObjectParameter("toEmail", toEmail) :
                new ObjectParameter("toEmail", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var msgDetailParameter = msgDetail != null ?
                new ObjectParameter("msgDetail", msgDetail) :
                new ObjectParameter("msgDetail", typeof(string));
    
            var msgDateParameter = msgDate.HasValue ?
                new ObjectParameter("msgDate", msgDate) :
                new ObjectParameter("msgDate", typeof(System.DateTime));
    
            var replyidParameter = replyid.HasValue ?
                new ObjectParameter("replyid", replyid) :
                new ObjectParameter("replyid", typeof(int));
    
            var isreadParameter = isread != null ?
                new ObjectParameter("isread", isread) :
                new ObjectParameter("isread", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMessagePat", fromEmailParameter, toEmailParameter, subjectParameter, msgDetailParameter, msgDateParameter, replyidParameter, isreadParameter);
        }
    
        public virtual int UpdateAppStatus(Nullable<int> appointmentId, string appointmentStatus)
        {
            var appointmentIdParameter = appointmentId.HasValue ?
                new ObjectParameter("appointmentId", appointmentId) :
                new ObjectParameter("appointmentId", typeof(int));
    
            var appointmentStatusParameter = appointmentStatus != null ?
                new ObjectParameter("appointmentStatus", appointmentStatus) :
                new ObjectParameter("appointmentStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAppStatus", appointmentIdParameter, appointmentStatusParameter);
        }
    
        public virtual int UpdatePateint(Nullable<int> memid, string firstname, string lastname, Nullable<System.DateTime> dateOfBirth, string gender, string address)
        {
            var memidParameter = memid.HasValue ?
                new ObjectParameter("memid", memid) :
                new ObjectParameter("memid", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePateint", memidParameter, firstnameParameter, lastnameParameter, dateOfBirthParameter, genderParameter, addressParameter);
        }
    
        public virtual int InsertDoctor(Nullable<int> memid, string firstname, string lastname, Nullable<int> totalExperience, Nullable<int> specializedId, string gender)
        {
            var memidParameter = memid.HasValue ?
                new ObjectParameter("memid", memid) :
                new ObjectParameter("memid", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var totalExperienceParameter = totalExperience.HasValue ?
                new ObjectParameter("TotalExperience", totalExperience) :
                new ObjectParameter("TotalExperience", typeof(int));
    
            var specializedIdParameter = specializedId.HasValue ?
                new ObjectParameter("SpecializedId", specializedId) :
                new ObjectParameter("SpecializedId", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDoctor", memidParameter, firstnameParameter, lastnameParameter, totalExperienceParameter, specializedIdParameter, genderParameter);
        }
    
        public virtual int UpdateDoctor(Nullable<int> memid, string firstname, string lastname, Nullable<int> totalExperience, Nullable<int> specializedId, string gender)
        {
            var memidParameter = memid.HasValue ?
                new ObjectParameter("memid", memid) :
                new ObjectParameter("memid", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var totalExperienceParameter = totalExperience.HasValue ?
                new ObjectParameter("TotalExperience", totalExperience) :
                new ObjectParameter("TotalExperience", typeof(int));
    
            var specializedIdParameter = specializedId.HasValue ?
                new ObjectParameter("SpecializedId", specializedId) :
                new ObjectParameter("SpecializedId", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctor", memidParameter, firstnameParameter, lastnameParameter, totalExperienceParameter, specializedIdParameter, genderParameter);
        }
    
        public virtual int UpdateIsRead(Nullable<int> mesid, string res)
        {
            var mesidParameter = mesid.HasValue ?
                new ObjectParameter("mesid", mesid) :
                new ObjectParameter("mesid", typeof(int));
    
            var resParameter = res != null ?
                new ObjectParameter("res", res) :
                new ObjectParameter("res", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIsRead", mesidParameter, resParameter);
        }
    
        public virtual int InsertAdmin(string firstname, string lastname, string gender, string address, string email, string password)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAdmin", firstnameParameter, lastnameParameter, genderParameter, addressParameter, emailParameter, passwordParameter);
        }
    
        public virtual int UpdateAdminPassword(Nullable<int> adminid, string passwordnew)
        {
            var adminidParameter = adminid.HasValue ?
                new ObjectParameter("adminid", adminid) :
                new ObjectParameter("adminid", typeof(int));
    
            var passwordnewParameter = passwordnew != null ?
                new ObjectParameter("passwordnew", passwordnew) :
                new ObjectParameter("passwordnew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdminPassword", adminidParameter, passwordnewParameter);
        }
    
        public virtual int UpdateAdmin(string firstname, string lastname, string gender, string address, string email)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdmin", firstnameParameter, lastnameParameter, genderParameter, addressParameter, emailParameter);
        }
    
        public virtual int InsertSupplier(Nullable<int> memid, string firstname, string lastname, string companyname, string companyAdress)
        {
            var memidParameter = memid.HasValue ?
                new ObjectParameter("memid", memid) :
                new ObjectParameter("memid", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var companyAdressParameter = companyAdress != null ?
                new ObjectParameter("companyAdress", companyAdress) :
                new ObjectParameter("companyAdress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplier", memidParameter, firstnameParameter, lastnameParameter, companynameParameter, companyAdressParameter);
        }
    
        public virtual int UpdateSupplier(Nullable<int> memid, string firstname, string lastname, string companyname, string companyAdress)
        {
            var memidParameter = memid.HasValue ?
                new ObjectParameter("memid", memid) :
                new ObjectParameter("memid", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var companyAdressParameter = companyAdress != null ?
                new ObjectParameter("companyAdress", companyAdress) :
                new ObjectParameter("companyAdress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSupplier", memidParameter, firstnameParameter, lastnameParameter, companynameParameter, companyAdressParameter);
        }
    
        public virtual int InsertDrugDelivery(Nullable<int> orderid, Nullable<int> supplierid)
        {
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            var supplieridParameter = supplierid.HasValue ?
                new ObjectParameter("supplierid", supplierid) :
                new ObjectParameter("supplierid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDrugDelivery", orderidParameter, supplieridParameter);
        }
    
        public virtual int UpdateOrStatus(Nullable<int> orderid, string orderStatus)
        {
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("orderStatus", orderStatus) :
                new ObjectParameter("orderStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrStatus", orderidParameter, orderStatusParameter);
        }
    
        public virtual int Updatedeleivery(Nullable<int> orderid, Nullable<System.DateTime> ddate)
        {
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            var ddateParameter = ddate.HasValue ?
                new ObjectParameter("ddate", ddate) :
                new ObjectParameter("ddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updatedeleivery", orderidParameter, ddateParameter);
        }
    
        public virtual int InsertDrug(string drugName, Nullable<System.DateTime> manufactureDate, Nullable<System.DateTime> expiredDate, string usedFor, string sideEffects, Nullable<int> totalQuantityAvailable, Nullable<bool> isDeleted)
        {
            var drugNameParameter = drugName != null ?
                new ObjectParameter("DrugName", drugName) :
                new ObjectParameter("DrugName", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var expiredDateParameter = expiredDate.HasValue ?
                new ObjectParameter("ExpiredDate", expiredDate) :
                new ObjectParameter("ExpiredDate", typeof(System.DateTime));
    
            var usedForParameter = usedFor != null ?
                new ObjectParameter("UsedFor", usedFor) :
                new ObjectParameter("UsedFor", typeof(string));
    
            var sideEffectsParameter = sideEffects != null ?
                new ObjectParameter("SideEffects", sideEffects) :
                new ObjectParameter("SideEffects", typeof(string));
    
            var totalQuantityAvailableParameter = totalQuantityAvailable.HasValue ?
                new ObjectParameter("TotalQuantityAvailable", totalQuantityAvailable) :
                new ObjectParameter("TotalQuantityAvailable", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDrug", drugNameParameter, manufactureDateParameter, expiredDateParameter, usedForParameter, sideEffectsParameter, totalQuantityAvailableParameter, isDeletedParameter);
        }
    
        public virtual int UpadateDrug(Nullable<int> drugId, string drugName, Nullable<System.DateTime> manufactureDate, Nullable<System.DateTime> expiredDate, string usedFor, string sideEffects, Nullable<int> totalQuantityAvailable, Nullable<bool> isDeleted)
        {
            var drugIdParameter = drugId.HasValue ?
                new ObjectParameter("DrugId", drugId) :
                new ObjectParameter("DrugId", typeof(int));
    
            var drugNameParameter = drugName != null ?
                new ObjectParameter("DrugName", drugName) :
                new ObjectParameter("DrugName", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var expiredDateParameter = expiredDate.HasValue ?
                new ObjectParameter("ExpiredDate", expiredDate) :
                new ObjectParameter("ExpiredDate", typeof(System.DateTime));
    
            var usedForParameter = usedFor != null ?
                new ObjectParameter("UsedFor", usedFor) :
                new ObjectParameter("UsedFor", typeof(string));
    
            var sideEffectsParameter = sideEffects != null ?
                new ObjectParameter("SideEffects", sideEffects) :
                new ObjectParameter("SideEffects", typeof(string));
    
            var totalQuantityAvailableParameter = totalQuantityAvailable.HasValue ?
                new ObjectParameter("TotalQuantityAvailable", totalQuantityAvailable) :
                new ObjectParameter("TotalQuantityAvailable", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpadateDrug", drugIdParameter, drugNameParameter, manufactureDateParameter, expiredDateParameter, usedForParameter, sideEffectsParameter, totalQuantityAvailableParameter, isDeletedParameter);
        }
    
        public virtual int Updateisdelete(Nullable<int> drugid, Nullable<bool> isdeleted)
        {
            var drugidParameter = drugid.HasValue ?
                new ObjectParameter("drugid", drugid) :
                new ObjectParameter("drugid", typeof(int));
    
            var isdeletedParameter = isdeleted.HasValue ?
                new ObjectParameter("isdeleted", isdeleted) :
                new ObjectParameter("isdeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updateisdelete", drugidParameter, isdeletedParameter);
        }
    
        public virtual int UpdateAssign(Nullable<int> ordid, string orderstarus)
        {
            var ordidParameter = ordid.HasValue ?
                new ObjectParameter("ordid", ordid) :
                new ObjectParameter("ordid", typeof(int));
    
            var orderstarusParameter = orderstarus != null ?
                new ObjectParameter("orderstarus", orderstarus) :
                new ObjectParameter("orderstarus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAssign", ordidParameter, orderstarusParameter);
        }
    }
}
